\documentclass[a4paper,twoside,draft]{article}

\begin{document}
\title{Concurrent Memory Reclamation on ARM}
\author{Martin Hafskjold Thoresen}
\date{\today}
\maketitle

\begin{abstract}
  Concurrent programs, like any other program, produces garbage.
  In languages that does not have a garbage collector, freeing used
  memory needs to be handeled by the programmer, or through other
  means by the language.
  This report surveys different memory reclamation schemes, used
  in common concurrent data structures, such as Queues, Lists, and Skip-Lists,
  on the ARM platform.
\end{abstract}

\section{Introduction}

\tableofcontents

\section{Background}
What do we need to understand in order to appreciate this report?
Moores law, parallel applications, multi core, blabla

Something about ARM.

\subsection{Rust}
New programming language, memory safety without GC, etc.

\section{Memory Reclamation}
What is memory reclamation? Why is it hard? What approaches are there?

\section{Results}
What did we run? Plot some graphs. What did we find out?
Which scheme is better for which application?
Runtime, power usage, etc.

\section{Discussion}
Whys

\end{document}
